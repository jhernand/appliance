package registry

import (
	"bytes"
	"context"
	"crypto/tls"
	"crypto/x509"
	"encoding/base64"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/bombsimon/logrusr/v4"
	. "github.com/onsi/ginkgo/v2/dsl/core"
	. "github.com/onsi/gomega"
	"github.com/sirupsen/logrus"
)

var _ = Describe("Registry server", func() {
	var (
		ctx    context.Context
		tmpDir string
	)

	BeforeEach(func() {
		var err error

		// Create a context:
		ctx = context.Background()

		// Create a temporary directory:
		tmpDir, err = os.MkdirTemp("", "*.test")
		Expect(err).ToNot(HaveOccurred())
	})

	AfterEach(func() {
		// Remove the temporary directory:
		err := os.RemoveAll(tmpDir)
		Expect(err).ToNot(HaveOccurred())
	})

	It("Can't be created without a logger", func() {
		server, err := NewRegistryServer().
			SetRootDir(tmpDir).
			SetListenAddr("localhost:0").
			Build()
		Expect(err).To(HaveOccurred())
		msg := err.Error()
		Expect(msg).To(ContainSubstring("logger"))
		Expect(msg).To(ContainSubstring("mandatory"))
		Expect(server).To(BeNil())
	})

	It("Can't be created without a listen address", func() {
		server, err := NewRegistryServer().
			SetLogger(logger).
			SetRootDir(tmpDir).
			Build()
		Expect(err).To(HaveOccurred())
		msg := err.Error()
		Expect(msg).To(ContainSubstring("listen"))
		Expect(msg).To(ContainSubstring("mandatory"))
		Expect(server).To(BeNil())
	})

	It("Can't be created without a root directory", func() {
		server, err := NewRegistryServer().
			SetLogger(logger).
			SetListenAddr("localhost:0").
			Build()
		Expect(err).To(HaveOccurred())
		msg := err.Error()
		Expect(msg).To(ContainSubstring("root"))
		Expect(msg).To(ContainSubstring("mandatory"))
		Expect(server).To(BeNil())
	})

	It("Can't be created with a certificate but not a key", func() {
		server, err := NewRegistryServer().
			SetLogger(logger).
			SetRootDir(tmpDir).
			SetListenAddr("localhost:0").
			SetCertificate([]byte{0, 1, 2}, nil).
			Build()
		Expect(err).To(HaveOccurred())
		msg := err.Error()
		Expect(msg).To(ContainSubstring("certificate"))
		Expect(msg).To(ContainSubstring("mandatory"))
		Expect(server).To(BeNil())
	})

	It("Can't be created with a key but not certificate", func() {
		server, err := NewRegistryServer().
			SetLogger(logger).
			SetRootDir(tmpDir).
			SetListenAddr("localhost:0").
			SetCertificate(nil, []byte{0, 1, 2}).
			Build()
		Expect(err).To(HaveOccurred())
		msg := err.Error()
		Expect(msg).To(ContainSubstring("certificate"))
		Expect(msg).To(ContainSubstring("mandatory"))
		Expect(server).To(BeNil())
	})

	It("Writes logs to the passed logger", func() {
		// Create a logger that writes to a buffer and also to the Ginkgo writer:
		buffer := &bytes.Buffer{}
		multiWriter := io.MultiWriter(buffer, GinkgoWriter)
		logrusLogger := logrus.New()
		logrusLogger.Level = logrus.DebugLevel
		logrusLogger.Formatter = &logrus.JSONFormatter{
			PrettyPrint: true,
		}
		logrusLogger.Out = multiWriter
		logger := logrusr.New(logrusLogger)

		// Create the server:
		server, err := NewRegistryServer().
			SetLogger(logger).
			SetRootDir(tmpDir).
			SetListenAddr("localhost:0").
			Build()
		Expect(err).ToNot(HaveOccurred())
		err = server.Start(ctx)
		Expect(err).ToNot(HaveOccurred())
		defer func() {
			err := server.Stop(ctx)
			Expect(err).ToNot(HaveOccurred())
		}()

		// Verify that the logs have been written to the buffer:
		Expect(buffer.String()).ToNot(BeEmpty())
	})

	It("Responds to HTTP requests", func() {
		// Create the server:
		server, err := NewRegistryServer().
			SetLogger(logger).
			SetRootDir(tmpDir).
			SetListenAddr("localhost:0").
			Build()
		Expect(err).ToNot(HaveOccurred())
		err = server.Start(ctx)
		Expect(err).ToNot(HaveOccurred())
		defer func() {
			err := server.Stop(ctx)
			Expect(err).ToNot(HaveOccurred())
		}()

		// Create an HTTP client that trusts the certificate generated by the server and
		// verify that it can successfully send a request to the server:
		caCert, _ := server.Certificate()
		caPool := x509.NewCertPool()
		caPool.AppendCertsFromPEM(caCert)
		pingClient := &http.Client{
			Transport: &http.Transport{
				TLSClientConfig: &tls.Config{
					RootCAs: caPool,
				},
			},
		}
		pingURL := fmt.Sprintf("https://%s/v2", server.ListenAddr())
		pingResponse, err := pingClient.Get(pingURL)
		Expect(err).ToNot(HaveOccurred())
		defer func() {
			err := pingResponse.Body.Close()
			Expect(err).ToNot(HaveOccurred())
		}()
		Expect(pingResponse.StatusCode).To(Equal(http.StatusOK))
		_, err = io.Copy(io.Discard, pingResponse.Body)
		Expect(err).ToNot(HaveOccurred())
	})

	It("Can be used to push and pull images", func() {
		By("Creating the server")
		server, err := NewRegistryServer().
			SetLogger(logger).
			SetRootDir(tmpDir).
			SetListenAddr("localhost:0").
			Build()
		Expect(err).ToNot(HaveOccurred())
		err = server.Start(ctx)
		Expect(err).ToNot(HaveOccurred())
		defer func() {
			err := server.Stop(ctx)
			Expect(err).ToNot(HaveOccurred())
		}()

		By("Writing the test image")
		imageArchiveBytes, err := base64.StdEncoding.DecodeString(imageArchive)
		Expect(err).ToNot(HaveOccurred())
		imageArchiveFile := filepath.Join(tmpDir, "image.tar")
		err = os.WriteFile(imageArchiveFile, imageArchiveBytes, 0600)
		Expect(err).ToNot(HaveOccurred())

		By("Pushing the test image")
		certDir := filepath.Join(tmpDir, "certs")
		err = os.MkdirAll(certDir, 0700)
		Expect(err).ToNot(HaveOccurred())
		caBytes, _ := server.Certificate()
		caFile := filepath.Join(certDir, "ca.crt")
		err = os.WriteFile(caFile, caBytes, 0600)
		Expect(err).ToNot(HaveOccurred())
		skopeoPath, err := exec.LookPath("skopeo")
		Expect(err).ToNot(HaveOccurred())
		skopeoCmd := &exec.Cmd{
			Path: skopeoPath,
			Args: []string{
				"skopeo",
				"copy",
				fmt.Sprintf("--dest-cert-dir=%s", certDir),
				fmt.Sprintf("oci-archive:%s", imageArchiveFile),
				fmt.Sprintf("docker://%s/my/image:latest", server.ListenAddr()),
			},
			Stdout: GinkgoWriter,
			Stderr: GinkgoWriter,
		}
		err = skopeoCmd.Run()
		Expect(err).ToNot(HaveOccurred())

		By("Verifying that the image has been pushed")
		dataDir := filepath.Join(tmpDir, "docker", "registry", "v2")
		Expect(dataDir).To(BeADirectory())
		repoDir := filepath.Join(dataDir, "repositories", "my", "image")
		Expect(repoDir).To(BeADirectory())

		By("Pulling the test image")
		imageDir := filepath.Join(tmpDir, "image")
		skopeoCmd = &exec.Cmd{
			Path: skopeoPath,
			Args: []string{
				"skopeo",
				"copy",
				fmt.Sprintf("--src-cert-dir=%s", certDir),
				fmt.Sprintf("docker://%s/my/image:latest", server.ListenAddr()),
				fmt.Sprintf("oci:%s", imageDir),
			},
			Stdout: GinkgoWriter,
			Stderr: GinkgoWriter,
		}
		err = skopeoCmd.Run()
		Expect(err).ToNot(HaveOccurred())
	})
})

// imageArchive is an OCI archive containing an image that was created with these commands:
//
// $ cat > hello.txt <<.
// Hello!
// .
//
// $ cat > Containerfile <<
// FROM scratch
// COPY hello.txt /
// .
//
// $ skopeo copy docker-daemon:hello.latest oci-archive:hello.tar
//
// $ cat hello.tar | base64
//
// This image archive is used in the tests to verify that it is possible to push an image to the
// registry server.
const imageArchive = `
YmxvYnMvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwNDA3NTUAMDAwMDAw
MAAwMDAwMDAwADAwMDAwMDAwMDAwADE0NDUzNTc1Njc0ADAxMjIwNQAgNQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMHJvb3QAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAcm9vdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAwADAwMDAw
MDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABi
bG9icy9zaGEyNTYvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDA0MDc1NQAwMDAwMDAw
ADAwMDAwMDAAMDAwMDAwMDAwMDAAMTQ0NTM1NzU2NzQAMDEzMjE1ACA1AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwcm9vdAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAByb290AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAAMDAwMDAw
MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGJs
b2JzL3NoYTI1Ni84OTA4MGFlNDMzMDk3YzQ3ZTNhN2E0NWFjNzhiNGM0YmZmNzU3NzI4MzI3MzYz
OGRiZmY5NThkNWViYWQ4ZGE1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMTAwNjQ0ADAwMDAwMDAA
MDAwMDAwMAAwMDAwMDAwMDcwNAAxNDQ1MzU3NTY3NAAwMjQwNTcAIDAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDByb290AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHJvb3QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwMAAwMDAwMDAw
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeyJj
cmVhdGVkIjoiMjAyMy0wNy0xMlQxODo1NDoyNC45NDMzOTEwNzlaIiwiYXJjaGl0ZWN0dXJlIjoi
YW1kNjQiLCJvcyI6ImxpbnV4IiwiY29uZmlnIjp7IkVudiI6WyJQQVRIPS91c3IvbG9jYWwvc2Jp
bjovdXNyL2xvY2FsL2JpbjovdXNyL3NiaW46L3Vzci9iaW46L3NiaW46L2JpbiJdfSwicm9vdGZz
Ijp7InR5cGUiOiJsYXllcnMiLCJkaWZmX2lkcyI6WyJzaGEyNTY6Y2I3YzVhZDRlNzUwZGFmZTE0
NWZjM2E3NTU2ZDYxM2NhZjViMzJiZDRkODhiYWM4NDU1YzE2MDA0OTZlOWNjZiJdfSwiaGlzdG9y
eSI6W3siY3JlYXRlZCI6IjIwMjMtMDctMTJUMTg6NTQ6MjQuOTQzMzkxMDc5WiIsImNyZWF0ZWRf
YnkiOiIvYmluL3NoIC1jICMobm9wKSBDT1BZIGZpbGU6MGExOTE1ZTFhYjhmOWJkNDk2ODhlOTE2
ZTAyYWM4OTFiZTZiMjU5N2VmNTY2ODU4ODIyNzdmNDI3YWEyYmI1NCBpbiAvICJ9XX0AAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABibG9i
cy9zaGEyNTYvYmVkYjYwNGJiZjE3NDQ1M2RlMjcxOTFlY2ZiMzNiZmQ5YjNkNTc0MWY4NDU4ZTg3
YjRkNjljNmY2M2U0NjY2YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDEwMDY0NAAwMDAwMDAwADAw
MDAwMDAAMDAwMDAwMDAxNjIAMTQ0NTM1NzU2NzQAMDI0MjA2ACAwAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwcm9vdAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAByb290AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAAMDAwMDAwMAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB+LCAAA
CW6IAP/KSM3JydcrqShhoB0wMDQwMDMxYTCAAHTawMDAnMHQxMTU2NTc2NjQhMHA0NDQ0JxBwQBh
BO1AaXFJYhGDAcV2oXkKWWowAw9Q/CtyIQRGwSgYBaNgFIwIAAAAAP//AwD2ptheAAgAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYmxvYnMv
c2hhMjU2L2VhODc2YTgxOGNkZDhmMWFjY2Y0Mjk4NGU0NmVlMTI3MThjOTI0YzllNDIwOWQyNTFj
MDU4ZWJhYzdhN2YyODMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAxMDA2NDQAMDAwMDAwMAAwMDAw
MDAwADAwMDAwMDAwNjIxADE0NDUzNTc1Njc0ADAyNDEyMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMHJvb3QAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAcm9vdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAwADAwMDAwMDAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7InNjaGVt
YVZlcnNpb24iOjIsIm1lZGlhVHlwZSI6ImFwcGxpY2F0aW9uL3ZuZC5vY2kuaW1hZ2UubWFuaWZl
c3QudjEranNvbiIsImNvbmZpZyI6eyJtZWRpYVR5cGUiOiJhcHBsaWNhdGlvbi92bmQub2NpLmlt
YWdlLmNvbmZpZy52MStqc29uIiwiZGlnZXN0Ijoic2hhMjU2Ojg5MDgwYWU0MzMwOTdjNDdlM2E3
YTQ1YWM3OGI0YzRiZmY3NTc3MjgzMjczNjM4ZGJmZjk1OGQ1ZWJhZDhkYTUiLCJzaXplIjo0NTJ9
LCJsYXllcnMiOlt7Im1lZGlhVHlwZSI6ImFwcGxpY2F0aW9uL3ZuZC5vY2kuaW1hZ2UubGF5ZXIu
djEudGFyK2d6aXAiLCJkaWdlc3QiOiJzaGEyNTY6YmVkYjYwNGJiZjE3NDQ1M2RlMjcxOTFlY2Zi
MzNiZmQ5YjNkNTc0MWY4NDU4ZTg3YjRkNjljNmY2M2U0NjY2YSIsInNpemUiOjExNH1dfQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGluZGV4Lmpz
b24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMTAwNjQ0ADAwMDAwMDAAMDAwMDAw
MAAwMDAwMDAwMDI3MgAxNDQ1MzU3NTY3NAAwMTMxMDQAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDByb290AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAHJvb3QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwMAAwMDAwMDAwAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeyJzY2hlbWFW
ZXJzaW9uIjoyLCJtYW5pZmVzdHMiOlt7Im1lZGlhVHlwZSI6ImFwcGxpY2F0aW9uL3ZuZC5vY2ku
aW1hZ2UubWFuaWZlc3QudjEranNvbiIsImRpZ2VzdCI6InNoYTI1NjplYTg3NmE4MThjZGQ4ZjFh
Y2NmNDI5ODRlNDZlZTEyNzE4YzkyNGM5ZTQyMDlkMjUxYzA1OGViYWM3YTdmMjgzIiwic2l6ZSI6
NDAxfV19AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABvY2ktbGF5b3V0
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDEwMDY0NAAwMDAwMDAwADAwMDAwMDAA
MDAwMDAwMDAwMzcAMTQ0NTM1NzU2NzQAMDEzMTExACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyADAwcm9vdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAByb290AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAAMDAwMDAwMAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHsiaW1hZ2VMYXlv
dXRWZXJzaW9uIjogIjEuMC4wIn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
`
